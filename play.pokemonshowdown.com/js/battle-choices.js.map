{"version":3,"file":"battle-choices.js","names":["BattleChoiceBuilder","request","noCancel","choices","current","choiceType","move","targetLoc","mega","megax","megay","ultra","z","max","tera","alreadySwitchingIn","alreadyMega","alreadyMax","alreadyZ","alreadyTera","requestType","fillPasses","_proto","prototype","toString","concat","stringChoice","join","replace","isDone","length","requestLength","isEmpty","_i2","_this$choices2","choice","index","active","forceSwitch","chosenTeamSize","currentMoveRequest","arguments","undefined","noMoreSwitchChoices","i","side","pokemon","fainted","includes","addChoice","choiceString","parseChoice","err","message","isLastChoice","_this$currentMoveRequ","targetable","_this$currentMove","choosableTargets","currentMove","target","maybeDisabled","_this$currentMoveRequ2","_this$currentMoveRequ3","trapped","targetPokemon","splice","maybeTrapped","push","_this$currentMoveList","moveIndex","currentMoveList","moveRequest","maxMoves","canDynamax","zMoves","moves","Error","startsWith","slice","test","toID","parseInt","trim","endsWith","moveid","id","disabled","name","_move$name","_this$request$side","isTeamPreview","lowerChoice","toLowerCase","choiceid","matchLevel","match","serverPokemon","curMatchLevel","speciesForme","Dex","species","get","baseSpecies","isReviving","some","p","reviving","moveSpecial","fixRequest","battle","teamPreview","wait","_i7","_request$side$pokemon2","parseDetails","ident","substr","details","parseHealth","condition","gameType","_i9","_request$side$pokemon4","switchable","baseAbility","maxChosenTeamSize","teamPreviewCount","mySide","map","_i11","_request$active2","_i13","_active$moves2","gigantamax","_i15","_active$maxMoves2","canZMove","_i17","_active$zMoves2"],"sources":["../src/battle-choices.ts"],"sourcesContent":["/**\n * Battle choices\n *\n * PS will send requests \"what do you do this turn?\", and you send back\n * choices \"I switch Pikachu for Caterpie, and Squirtle uses Water Gun\"\n *\n * This file contains classes for handling requests and choices.\n *\n * Dependencies: battle-dex\n *\n * @author Guangcong Luo <guangcongluo@gmail.com>\n * @license MIT\n */\n\nimport type { Battle, ServerPokemon } from \"./battle\";\nimport { Dex, toID, type ID } from \"./battle-dex\";\n\nexport interface BattleRequestSideInfo {\n\tname: string;\n\tid: 'p1' | 'p2' | 'p3' | 'p4';\n\tpokemon: ServerPokemon[];\n}\nexport interface BattleRequestActivePokemon {\n\tmoves: {\n\t\tname: string,\n\t\tid: ID,\n\t\tpp: number,\n\t\tmaxpp: number,\n\t\ttarget: Dex.MoveTarget,\n\t\tdisabled?: boolean,\n\t}[];\n\tmaxMoves?: {\n\t\tname: string,\n\t\tid: ID,\n\t\ttarget: Dex.MoveTarget,\n\t\tdisabled?: boolean,\n\t}[];\n\tzMoves?: ({\n\t\tname: string,\n\t\tid: ID,\n\t\ttarget: Dex.MoveTarget,\n\t\tdisabled?: false,\n\t} | null)[];\n\t/** also true if the pokemon can Gigantamax */\n\tcanDynamax?: boolean;\n\t/** if the pokemon can Gigantamax, a string containing the full name of its G-max move */\n\tgigantamax?: string;\n\tcanMegaEvo?: boolean;\n\tcanMegaEvoX?: boolean;\n\tcanMegaEvoY?: boolean;\n\tcanUltraBurst?: boolean;\n\tcanTerastallize?: string;\n\ttrapped?: boolean;\n\tmaybeTrapped?: boolean;\n\tmaybeDisabled?: boolean;\n\tmaybeLocked?: boolean;\n}\n\nexport interface BattleMoveRequest {\n\trequestType: 'move';\n\trqid: number;\n\tside: BattleRequestSideInfo;\n\tactive: (BattleRequestActivePokemon | null)[];\n\tnoCancel?: boolean;\n\ttargetable?: boolean;\n}\nexport interface BattleSwitchRequest {\n\trequestType: 'switch';\n\trqid: number;\n\tside: BattleRequestSideInfo;\n\tforceSwitch: boolean[];\n\tnoCancel?: boolean;\n}\nexport interface BattleTeamRequest {\n\trequestType: 'team';\n\trqid: number;\n\tside: BattleRequestSideInfo;\n\tmaxTeamSize?: number;\n\tmaxChosenTeamSize?: number;\n\tchosenTeamSize?: number;\n\tnoCancel?: boolean;\n}\nexport interface BattleWaitRequest {\n\trequestType: 'wait';\n\trqid: number;\n\tside: undefined;\n\tnoCancel?: boolean;\n}\nexport type BattleRequest = BattleMoveRequest | BattleSwitchRequest | BattleTeamRequest | BattleWaitRequest;\n\ninterface BattleMoveChoice {\n\tchoiceType: 'move';\n\t/** 1-based move */\n\tmove: number;\n\ttargetLoc: number;\n\t// gen 6\n\tmega: boolean;\n\tmegax: boolean;\n\tmegay: boolean;\n\t// gen 7\n\tz: boolean;\n\tultra: boolean;\n\t// gen 8\n\tmax: boolean;\n\t// gen 9\n\ttera: boolean;\n}\ninterface BattleSwitchChoice {\n\tchoiceType: 'switch' | 'team';\n\t/** 1-based pokemon */\n\ttargetPokemon: number;\n}\ninterface BattleMiscChoice {\n\tchoiceType: 'shift' | 'testfight';\n}\ntype BattleChoice = BattleMoveChoice | BattleSwitchChoice | BattleMiscChoice;\n\n/**\n * Tracks a partial choice, allowing you to build it up one step at a time,\n * and maybe even construct a UI to build it!\n *\n * Doesn't support going backwards; just use `new BattleChoiceBuilder`.\n */\nexport class BattleChoiceBuilder {\n\trequest: BattleRequest;\n\tnoCancel: boolean;\n\t/** Completed choices in string form */\n\tchoices: string[] = [];\n\t/** Currently active partial move choice - not used for other choices, which don't have partial states */\n\tcurrent: BattleMoveChoice = {\n\t\tchoiceType: 'move',\n\t\t/** if nonzero, show target screen; if zero, show move screen */\n\t\tmove: 0,\n\t\ttargetLoc: 0, // should always be 0: is not partial if `targetLoc` is known\n\t\tmega: false,\n\t\tmegax: false,\n\t\tmegay: false,\n\t\tultra: false,\n\t\tz: false,\n\t\tmax: false,\n\t\ttera: false,\n\t};\n\talreadySwitchingIn: number[] = [];\n\talreadyMega = false;\n\talreadyMax = false;\n\talreadyZ = false;\n\talreadyTera = false;\n\n\tconstructor(request: BattleRequest) {\n\t\tthis.request = request;\n\t\tthis.noCancel = request.noCancel || request.requestType === 'wait';\n\t\tthis.fillPasses();\n\t}\n\n\ttoString() {\n\t\tlet choices = this.choices;\n\t\tif (this.current.move) choices = choices.concat(this.stringChoice(this.current));\n\t\treturn choices.join(', ').replace(/, team /g, ', ');\n\t}\n\n\tisDone() {\n\t\treturn this.choices.length >= this.requestLength();\n\t}\n\tisEmpty() {\n\t\tfor (const choice of this.choices) {\n\t\t\tif (choice !== 'pass') return false;\n\t\t}\n\t\tif (this.current.move) return false;\n\t\treturn true;\n\t}\n\n\t/** Index of the current Pokémon to make choices for */\n\tindex(): number {\n\t\treturn this.choices.length;\n\t}\n\t/** How many choices is the server expecting? */\n\trequestLength() {\n\t\tconst request = this.request;\n\t\tswitch (request.requestType) {\n\t\tcase 'move':\n\t\t\treturn request.active.length;\n\t\tcase 'switch':\n\t\t\treturn request.forceSwitch.length;\n\t\tcase 'team':\n\t\t\treturn request.chosenTeamSize || 1;\n\t\tcase 'wait':\n\t\t\treturn 0;\n\t\t}\n\t}\n\tcurrentMoveRequest(index = this.index()) {\n\t\tif (this.request.requestType !== 'move') return null;\n\t\treturn this.request.active[index];\n\t}\n\tnoMoreSwitchChoices() {\n\t\tif (this.request.requestType !== 'switch') return false;\n\t\tfor (let i = this.requestLength(); i < this.request.side.pokemon.length; i++) {\n\t\t\tconst pokemon = this.request.side.pokemon[i];\n\t\t\tif (!pokemon.fainted && !this.alreadySwitchingIn.includes(i + 1)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\taddChoice(choiceString: string) {\n\t\tlet choice: BattleChoice | null;\n\t\ttry {\n\t\t\tchoice = this.parseChoice(choiceString);\n\t\t} catch (err) {\n\t\t\treturn (err as Error).message;\n\t\t}\n\t\tif (!choice) {\n\t\t\treturn \"You do not need to manually choose to pass; the client handles it for you automatically\";\n\t\t}\n\t\t/** only the last choice can be uncancelable */\n\t\tconst isLastChoice = this.choices.length + 1 >= this.requestLength();\n\t\tif (choice.choiceType === 'move') {\n\t\t\tif (!choice.targetLoc && (this.request as BattleMoveRequest).targetable) {\n\t\t\t\tconst choosableTargets: unknown[] = ['normal', 'any', 'adjacentAlly', 'adjacentAllyOrSelf', 'adjacentFoe'];\n\t\t\t\tif (choosableTargets.includes(this.currentMove(choice)?.target)) {\n\t\t\t\t\tthis.current = choice;\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.currentMoveRequest()?.maybeDisabled && isLastChoice) {\n\t\t\t\tthis.noCancel = true;\n\t\t\t}\n\t\t\tif (choice.mega || choice.megax || choice.megay) this.alreadyMega = true;\n\t\t\tif (choice.z) this.alreadyZ = true;\n\t\t\tif (choice.max) this.alreadyMax = true;\n\t\t\tif (choice.tera) this.alreadyTera = true;\n\t\t\tthis.current = {\n\t\t\t\tchoiceType: 'move',\n\t\t\t\tmove: 0,\n\t\t\t\ttargetLoc: 0,\n\t\t\t\tmega: false,\n\t\t\t\tmegax: false,\n\t\t\t\tmegay: false,\n\t\t\t\tultra: false,\n\t\t\t\tz: false,\n\t\t\t\tmax: false,\n\t\t\t\ttera: false,\n\t\t\t};\n\t\t} else if (choice.choiceType === 'switch' || choice.choiceType === 'team') {\n\t\t\tif (this.currentMoveRequest()?.trapped) {\n\t\t\t\treturn \"You are trapped and cannot switch out\";\n\t\t\t}\n\t\t\tif (this.alreadySwitchingIn.includes(choice.targetPokemon)) {\n\t\t\t\tif (choice.choiceType === 'switch') {\n\t\t\t\t\treturn \"You've already chosen to switch that Pokémon in\";\n\t\t\t\t}\n\t\t\t\t// remove choice instead\n\t\t\t\tfor (let i = 0; i < this.alreadySwitchingIn.length; i++) {\n\t\t\t\t\tif (this.alreadySwitchingIn[i] === choice.targetPokemon) {\n\t\t\t\t\t\tthis.alreadySwitchingIn.splice(i, 1);\n\t\t\t\t\t\tthis.choices.splice(i, 1);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn \"Unexpected bug, please report this\";\n\t\t\t}\n\t\t\tif (this.currentMoveRequest()?.maybeTrapped && isLastChoice) {\n\t\t\t\tthis.noCancel = true;\n\t\t\t}\n\t\t\tthis.alreadySwitchingIn.push(choice.targetPokemon);\n\t\t} else if (choice.choiceType === 'testfight') {\n\t\t\tif (isLastChoice) {\n\t\t\t\tthis.noCancel = true;\n\t\t\t}\n\t\t} else if (choice.choiceType === 'shift') {\n\t\t\tif (this.index() === 1) {\n\t\t\t\treturn \"Only Pokémon not already in the center can shift to the center\";\n\t\t\t}\n\t\t}\n\t\tthis.choices.push(this.stringChoice(choice));\n\t\tthis.fillPasses();\n\t\treturn null;\n\t}\n\n\t/**\n\t * Move and switch requests will often skip over some active Pokémon (mainly\n\t * fainted Pokémon). This will fill them in automatically, so we don't need\n\t * to ask a user for them.\n\t */\n\tfillPasses() {\n\t\tconst request = this.request;\n\t\tswitch (request.requestType) {\n\t\tcase 'move':\n\t\t\twhile (this.choices.length < request.active.length && !request.active[this.choices.length]) {\n\t\t\t\tthis.choices.push('pass');\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'switch':\n\t\t\tconst noMoreSwitchChoices = this.noMoreSwitchChoices();\n\t\t\twhile (this.choices.length < request.forceSwitch.length) {\n\t\t\t\tif (!request.forceSwitch[this.choices.length] || noMoreSwitchChoices) {\n\t\t\t\t\tthis.choices.push('pass');\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tcurrentMove(choice = this.current, index = this.index()) {\n\t\tconst moveIndex = choice.move - 1;\n\t\treturn this.currentMoveList(index, choice)?.[moveIndex] || null;\n\t}\n\n\tcurrentMoveList(\n\t\tindex = this.index(), current: { max?: boolean, z?: boolean } = this.current\n\t): ({ name: string, id: ID, target: Dex.MoveTarget, disabled?: boolean } | null)[] | null {\n\t\tconst moveRequest = this.currentMoveRequest(index);\n\t\tif (!moveRequest) return null;\n\t\tif (current.max || (moveRequest.maxMoves && !moveRequest.canDynamax)) {\n\t\t\treturn moveRequest.maxMoves || null;\n\t\t}\n\t\tif (current.z) {\n\t\t\treturn moveRequest.zMoves || null;\n\t\t}\n\t\treturn moveRequest.moves;\n\t}\n\t/**\n\t * Parses a choice from string form to BattleChoice form\n\t */\n\tparseChoice(choice: string, index = this.choices.length): BattleChoice | null {\n\t\tconst request = this.request;\n\t\tif (request.requestType === 'wait') throw new Error(`It's not your turn to choose anything`);\n\n\t\tif (choice === 'shift' || choice === 'testfight') {\n\t\t\tif (request.requestType !== 'move') {\n\t\t\t\tthrow new Error(`You must switch in a Pokémon, not move.`);\n\t\t\t}\n\t\t\treturn { choiceType: choice };\n\t\t}\n\n\t\tif (choice.startsWith('move ')) {\n\t\t\tif (request.requestType !== 'move') {\n\t\t\t\tthrow new Error(`You must switch in a Pokémon, not move.`);\n\t\t\t}\n\t\t\tconst moveRequest = request.active[index]!;\n\t\t\tchoice = choice.slice(5);\n\t\t\tlet current: BattleMoveChoice = {\n\t\t\t\tchoiceType: 'move',\n\t\t\t\tmove: 0,\n\t\t\t\ttargetLoc: 0,\n\t\t\t\tmega: false,\n\t\t\t\tmegax: false,\n\t\t\t\tmegay: false,\n\t\t\t\tultra: false,\n\t\t\t\tz: false,\n\t\t\t\tmax: false,\n\t\t\t\ttera: false,\n\t\t\t};\n\t\t\twhile (true) {\n\t\t\t\t// If data ends with a number, treat it as a target location.\n\t\t\t\t// We need to special case 'Conversion 2' so it doesn't get\n\t\t\t\t// confused with 'Conversion' erroneously sent with the target\n\t\t\t\t// '2' (since Conversion targets 'self', targetLoc can't be 2).\n\t\t\t\tif (/\\s(?:-|\\+)?[1-3]$/.test(choice) && toID(choice) !== 'conversion2') {\n\t\t\t\t\tif (current.targetLoc) throw new Error(`Move choice has multiple targets`);\n\t\t\t\t\tcurrent.targetLoc = parseInt(choice.slice(-2), 10);\n\t\t\t\t\tchoice = choice.slice(0, -2).trim();\n\t\t\t\t} else if (choice.endsWith(' mega')) {\n\t\t\t\t\tcurrent.mega = true;\n\t\t\t\t\tchoice = choice.slice(0, -5);\n\t\t\t\t} else if (choice.endsWith(' megax')) {\n\t\t\t\t\tcurrent.megax = true;\n\t\t\t\t\tchoice = choice.slice(0, -6);\n\t\t\t\t} else if (choice.endsWith(' megay')) {\n\t\t\t\t\tcurrent.megay = true;\n\t\t\t\t\tchoice = choice.slice(0, -6);\n\t\t\t\t} else if (choice.endsWith(' zmove')) {\n\t\t\t\t\tcurrent.z = true;\n\t\t\t\t\tchoice = choice.slice(0, -6);\n\t\t\t\t} else if (choice.endsWith(' ultra')) {\n\t\t\t\t\tcurrent.ultra = true;\n\t\t\t\t\tchoice = choice.slice(0, -6);\n\t\t\t\t} else if (choice.endsWith(' dynamax')) {\n\t\t\t\t\tcurrent.max = true;\n\t\t\t\t\tchoice = choice.slice(0, -8);\n\t\t\t\t} else if (choice.endsWith(' max')) {\n\t\t\t\t\tcurrent.max = true;\n\t\t\t\t\tchoice = choice.slice(0, -4);\n\t\t\t\t} else if (choice.endsWith(' terastallize')) {\n\t\t\t\t\tcurrent.tera = true;\n\t\t\t\t\tchoice = choice.slice(0, -13);\n\t\t\t\t} else if (choice.endsWith(' terastal')) {\n\t\t\t\t\tcurrent.tera = true;\n\t\t\t\t\tchoice = choice.slice(0, -9);\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (/^[0-9]+$/.test(choice)) {\n\t\t\t\t// Parse a one-based move index.\n\t\t\t\tcurrent.move = parseInt(choice, 10);\n\t\t\t} else {\n\t\t\t\t// Parse a move ID.\n\t\t\t\t// Move names are also allowed, but may cause ambiguity (see client issue #167).\n\t\t\t\tlet moveid = toID(choice);\n\t\t\t\tif (moveid.startsWith('hiddenpower')) moveid = 'hiddenpower' as ID;\n\n\t\t\t\tfor (let i = 0; i < moveRequest.moves.length; i++) {\n\t\t\t\t\tif (moveid === moveRequest.moves[i].id) {\n\t\t\t\t\t\tcurrent.move = i + 1;\n\t\t\t\t\t\tif (moveRequest.moves[i].disabled) {\n\t\t\t\t\t\t\tthrow new Error(`Move \"${moveRequest.moves[i].name}\" is disabled`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!current.move && moveRequest.zMoves) {\n\t\t\t\t\tfor (let i = 0; i < moveRequest.zMoves.length; i++) {\n\t\t\t\t\t\tif (!moveRequest.zMoves[i]) continue;\n\t\t\t\t\t\tif (moveid === moveRequest.zMoves[i]!.id) {\n\t\t\t\t\t\t\tcurrent.move = i + 1;\n\t\t\t\t\t\t\tcurrent.z = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!current.move && moveRequest.maxMoves) {\n\t\t\t\t\tfor (let i = 0; i < moveRequest.maxMoves.length; i++) {\n\t\t\t\t\t\tif (moveid === moveRequest.maxMoves[i].id) {\n\t\t\t\t\t\t\tif (moveRequest.maxMoves[i].disabled) {\n\t\t\t\t\t\t\t\tthrow new Error(`Move \"${moveRequest.maxMoves[i].name}\" is disabled`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcurrent.move = i + 1;\n\t\t\t\t\t\t\tcurrent.max = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (current.max && !moveRequest.canDynamax) current.max = false;\n\t\t\tconst move = this.currentMove(current, index);\n\t\t\tif (!move || move.disabled) {\n\t\t\t\tthrow new Error(`Move ${move?.name ?? current.move} is disabled`);\n\t\t\t}\n\t\t\treturn current;\n\t\t}\n\n\t\tif (choice.startsWith('switch ') || choice.startsWith('team ')) {\n\t\t\tchoice = choice.slice(choice.startsWith('team ') ? 5 : 7);\n\t\t\tconst isTeamPreview = request.requestType === 'team';\n\t\t\tlet current: BattleSwitchChoice = {\n\t\t\t\tchoiceType: isTeamPreview ? 'team' : 'switch',\n\t\t\t\ttargetPokemon: 0,\n\t\t\t};\n\t\t\tif (/^[0-9]+$/.test(choice)) {\n\t\t\t\t// Parse a one-based move index.\n\t\t\t\tcurrent.targetPokemon = parseInt(choice, 10);\n\t\t\t} else {\n\t\t\t\t// Parse a pokemon name\n\t\t\t\tconst lowerChoice = choice.toLowerCase();\n\t\t\t\tconst choiceid = toID(choice);\n\t\t\t\tlet matchLevel = 0;\n\t\t\t\tlet match = 0;\n\t\t\t\tfor (let i = 0; i < request.side.pokemon.length; i++) {\n\t\t\t\t\tconst serverPokemon = request.side.pokemon[i];\n\t\t\t\t\tlet curMatchLevel = 0;\n\t\t\t\t\tif (choice === serverPokemon.name) {\n\t\t\t\t\t\tcurMatchLevel = 10;\n\t\t\t\t\t} else if (lowerChoice === serverPokemon.name.toLowerCase()) {\n\t\t\t\t\t\tcurMatchLevel = 9;\n\t\t\t\t\t} else if (choiceid === toID(serverPokemon.name)) {\n\t\t\t\t\t\tcurMatchLevel = 8;\n\t\t\t\t\t} else if (choiceid === toID(serverPokemon.speciesForme)) {\n\t\t\t\t\t\tcurMatchLevel = 7;\n\t\t\t\t\t} else if (choiceid === toID(Dex.species.get(serverPokemon.speciesForme).baseSpecies)) {\n\t\t\t\t\t\tcurMatchLevel = 6;\n\t\t\t\t\t}\n\t\t\t\t\tif (curMatchLevel > matchLevel) {\n\t\t\t\t\t\tmatch = i + 1;\n\t\t\t\t\t\tmatchLevel = curMatchLevel;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!match) {\n\t\t\t\t\tthrow new Error(`Couldn't find Pokémon \"${choice}\" to switch to`);\n\t\t\t\t}\n\t\t\t\tcurrent.targetPokemon = match;\n\t\t\t}\n\t\t\tif (!isTeamPreview && current.targetPokemon - 1 < this.requestLength()) {\n\t\t\t\tthrow new Error(`That Pokémon is already in battle!`);\n\t\t\t}\n\t\t\tconst target = request.side.pokemon[current.targetPokemon - 1];\n\t\t\tconst isReviving = this.request.side?.pokemon!.some(p => p.reviving);\n\t\t\tif (!target) {\n\t\t\t\tthrow new Error(`Couldn't find Pokémon \"${choice}\" to switch to!`);\n\t\t\t}\n\t\t\tif (isReviving && target.fainted) return current;\n\t\t\tif (isReviving && !target.fainted) {\n\t\t\t\tthrow new Error(`${target.name} still has energy to battle!`);\n\t\t\t}\n\t\t\tif (target.fainted) {\n\t\t\t\tthrow new Error(`${target.name} is fainted and cannot battle!`);\n\t\t\t}\n\t\t\treturn current;\n\t\t}\n\n\t\tif (choice === 'pass') return null;\n\n\t\tthrow new Error(`Unrecognized choice \"${choice}\"`);\n\t}\n\n\t/**\n\t * Converts a choice from `BattleChoice` into string form\n\t */\n\tstringChoice(choice: BattleChoice | null) {\n\t\tif (!choice) return `pass`;\n\t\tswitch (choice.choiceType) {\n\t\tcase 'move':\n\t\t\tconst target = choice.targetLoc ? ` ${choice.targetLoc > 0 ? '+' : ''}${choice.targetLoc}` : ``;\n\t\t\treturn `move ${choice.move}${this.moveSpecial(choice)}${target}`;\n\t\tcase 'switch':\n\t\tcase 'team':\n\t\t\treturn `${choice.choiceType} ${choice.targetPokemon}`;\n\t\tcase 'shift':\n\t\tcase 'testfight':\n\t\t\treturn choice.choiceType;\n\t\t}\n\t}\n\tmoveSpecial(choice: BattleMoveChoice) {\n\t\treturn (choice.max ? ' max' : '') +\n\t\t\t(choice.mega ? ' mega' : '') +\n\t\t\t(choice.megax ? ' megax' : '') +\n\t\t\t(choice.megay ? ' megay' : '') +\n\t\t\t(choice.ultra ? ' ultra' : '') +\n\t\t\t(choice.z ? ' zmove' : '') +\n\t\t\t(choice.tera ? ' terastallize' : '');\n\t}\n\n\t/**\n\t * The request sent from the server is actually really gross, but we'll have\n\t * to wait until we transition to the new client before fixing it in the\n\t * protocol, in the interests of not needing to fix it twice (or needing to\n\t * fix it without TypeScript).\n\t *\n\t * In the meantime, this function converts a request from a shitty request\n\t * to a request that makes sense.\n\t *\n\t * I'm sorry for literally all of this.\n\t */\n\tstatic fixRequest(request: any, battle: Battle) {\n\t\tif (!request.requestType) {\n\t\t\trequest.requestType = 'move';\n\t\t\tif (request.forceSwitch) {\n\t\t\t\trequest.requestType = 'switch';\n\t\t\t} else if (request.teamPreview) {\n\t\t\t\trequest.requestType = 'team';\n\t\t\t} else if (request.wait) {\n\t\t\t\trequest.requestType = 'wait';\n\t\t\t}\n\t\t}\n\n\t\tif (request.requestType === 'wait') request.noCancel = true;\n\t\tif (request.side) {\n\t\t\tfor (const serverPokemon of request.side.pokemon) {\n\t\t\t\tbattle.parseDetails(serverPokemon.ident.substr(4), serverPokemon.ident, serverPokemon.details, serverPokemon);\n\t\t\t\tbattle.parseHealth(serverPokemon.condition, serverPokemon);\n\t\t\t}\n\t\t}\n\t\tif (request.requestType === 'team' && !request.chosenTeamSize) {\n\t\t\trequest.chosenTeamSize = 1;\n\t\t\tif (battle.gameType === 'doubles') {\n\t\t\t\trequest.chosenTeamSize = 2;\n\t\t\t}\n\t\t\tif (battle.gameType === 'triples' || battle.gameType === 'rotation') {\n\t\t\t\trequest.chosenTeamSize = 3;\n\t\t\t}\n\t\t\t// Request full team order if one of our Pokémon has Illusion\n\t\t\tfor (const switchable of request.side.pokemon) {\n\t\t\t\tif (toID(switchable.baseAbility) === 'illusion') {\n\t\t\t\t\trequest.chosenTeamSize = request.side.pokemon.length;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (request.maxChosenTeamSize) {\n\t\t\t\trequest.chosenTeamSize = request.maxChosenTeamSize;\n\t\t\t}\n\t\t\tif (battle.teamPreviewCount) {\n\t\t\t\tconst chosenTeamSize = battle.teamPreviewCount;\n\t\t\t\tif (chosenTeamSize > 0 && chosenTeamSize <= request.side.pokemon.length) {\n\t\t\t\t\trequest.chosenTeamSize = chosenTeamSize;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\trequest.targetable ||= battle.mySide.active.length > 1;\n\n\t\tif (request.active) {\n\t\t\trequest.active = request.active.map(\n\t\t\t\t(active: any, i: number) => request.side.pokemon[i].fainted ? null : active\n\t\t\t);\n\t\t\tfor (const active of request.active) {\n\t\t\t\tif (!active) continue;\n\t\t\t\tfor (const move of active.moves) {\n\t\t\t\t\tif (move.move) move.name = move.move;\n\t\t\t\t\tmove.id = toID(move.name);\n\t\t\t\t}\n\t\t\t\tif (active.maxMoves) {\n\t\t\t\t\tif (active.maxMoves.maxMoves) {\n\t\t\t\t\t\tactive.gigantamax = active.maxMoves.gigantamax;\n\t\t\t\t\t\tactive.maxMoves = active.maxMoves.maxMoves;\n\t\t\t\t\t}\n\t\t\t\t\tfor (const move of active.maxMoves) {\n\t\t\t\t\t\tif (move.move) move.name = Dex.moves.get(move.move).name;\n\t\t\t\t\t\tmove.id = toID(move.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (active.canZMove) {\n\t\t\t\t\tactive.zMoves = active.canZMove;\n\t\t\t\t\tfor (const move of active.zMoves) {\n\t\t\t\t\t\tif (!move) continue;\n\t\t\t\t\t\tif (move.move) move.name = move.move;\n\t\t\t\t\t\tmove.id = toID(move.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]}